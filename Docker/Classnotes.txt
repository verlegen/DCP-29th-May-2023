
###############
Day 13
14th June 2023
###############			
		
		
			Containerization ::::
			
			Infra-Structure Perspective ::::
			
				Jenkins_Master 
					Slave1 		--> Java
					Slave2		--> Python
					Slave3 		--> NodeJS 
					Slave4 		--> Angular 
					
			
			Containerization 	:
			
				
				Jenkins_Master	VM 
					Slave1 		VM 
						Install Container Engine
							Container1	--> Java
							Container2	--> Python
							Container3	--> NodeJS 
				
			Development/Deployments 
		
				Dev_Environment --> Java web appln.
						jdk, maven -- to build 			signin.war
						jdk1.8, Tomcat8.5 appln. server ---> successfully test the appln.
						
							Package the Appln. Artifacts along with its dependencies.
								--> (sigin.war,jdk1.8,Tomcat8.5) --> Package_ID1 -- Image.
								--> Package will be stored in a dedicated repo.								
				
				Test :
					QA 			jdk1.7, Tomcat8.0 ==> signin.war	--->  Package_ID1(sigin.war,jdk1.8,Tomcat8.5)
					UAT 
					
				Rel:
					Prod 
		
				Containers ==> are called as executable units 
				Images are static file - package of appln.
				
				
				
				
			Docker Container Engine ::
				
				
			-	Developer's Create the Application artifacts :::
			- 	Create the Docker Images using Dockerfile 
			- 	Publish thd Docker Images to Dockerhub
			
			- 	Pull the Images from Docker hub and deploy it in target servers as container.
			
			
			
			Docker Terminologies ::::
			
				Docker Engine/Daemon
				Image 
				Container 		- are Instance of Image.
				Registry
					Create dockerhub account.
					
				Repository
				
			Installation of Docker Engine ::
			
				Linux/Windows/Mac
				
			Working with Docker CLI Commands ::::
			
			docker --version 
			docker pull <image_name>
			
			
			docker by default runs in foreground mode 
			
			Modes of Container execution ::
			
				foreground / attached mode 
					docker run centos sleep 5
				background / detached mode 
					docker run -d centos sleep 5
				Interactive Mode 
					docker run -it centos
					
				docker exec -it <container_id> bash
				
			Container Port Mapping / Port Binding ::::
			
			
				tomcat ==> appln. server used to run webapps -- 8080
				
				
			tomcat ==> 
				
				
				host port and container port 
			
			
			
			<external_ip>:8080
			
			host_Machine == port 8085 : container 8080
			
			docker run -it -p 8585:8080 tomcat:8.0
			
			Steps to install tomcat in VM ??
			
			OS
			jdk
			envi 
			install tomcat 
			start 
			
			
###############
Day 14
15th June 2023
###############				
	
			Create Docker Image
			Publish the images to Dockerhub 
			Persistant Docker Volume
			Docker Compose 
			Docker Swarm & Kubernetes
			Kubernetes Architecture
			
		Create Docker Image
		
				- docker commit command

						centos image ==> install git,maven,jdk == container
				
					centos --> incremental changes in the image --> Layers
					
					docker commit <commit_id> <image_name>
				
				- docker build command 
				
					Dockerfile
					
				[root@ip-172-31-14-213 mydockercontents]# cat Dockerfile
				FROM debian
				RUN apt-get update
				RUN apt-get install git -y
				
					docker build -t <image_name> .
					
		Publish the images to Dockerhub :::

			login to dockerhub using docker cli
				login_id
				Access Token 							dckr_pat_vRIH__SNp_O5uBv4_JTJOxGccG8
					Create Access token in dockerhub
				docker login -u loksaieta
				
			push the image.
			
					
		Persistant Docker Volume	
			
			Stateless Application 		
			
			Stateful Application 	--> Application Logs/Reports/or anyfile - json/yaml
			
			Micro-Service based application ::
			
				E_Commerce App :
				
					user_Registration_Service ==> 3-tier architecture -> frontend,Appln.logic,Database
					
				docker Compose == is used to run multiple containers as a single service .
				
				Preserve the data that is generated inside the container
				
					Docker volume. 
				
				
				Ensure the application is up and running without any downtime, even it we lose the container.
				Container Orchestration Tools 
						docker swarm 
						Kubernetes 
			
				docker volume == command 
				
				docker run -it centos
				
				docker run -it centos bash / sleep 20
				
				docker run -it --mount source=dcp29vol1,destination=/dcp29vol1 centos bash
				
				
		Container Orchestration :::				
				
				Artifacts --> slave1 --> *.war --> copy to container --> 
				COPY 
				CP -- 
				ADD 
				EXPOSE 
				CMD 
				FROM 
				
				ENTRYPOINT 				
				
				FROM tomcat
				COPY ./*.war /usr/lib/tomcat/webapps 
				EXPOSE 8080
				CMD "bash"				# which can be replace at runtime 

				
				FROM tomcat
				COPY ./*.war /usr/lib/tomcat/webapps 
				EXPOSE 8080
				ENTRYPOINT "sleep"	# these are the default and constant. which cannot tbe replace at runtime.	
				CMD "20"
		
		
		Container Orchestration :::	
		
				Containers ::::
					Service 			---> c1,2,3		10 replicas of containers
					
				docker swarm ==> 
				
					Create the replicas of Container. to ensure high availability.
					Scale up / down  scale to 50 
					
				The Container Orchestration tool is used to ensure high availability of applications running inside the container. to ensure zero downtime. 
				
			Kubernetes Architecture :::
			
			DevOps CICD -- process ???
			
				- SCM Checkout 
				- Build - appln. build to create artifacts 	*.war_SNAPSHOT_V1.0 *.war_SNAPSHOT_V1.0
				- Docker Build -- create docker image 	*.war_SNAPSHOT_V1.0 		-- mywebapp:v1.0, mywebapp:v1.1
				- publish to docker hub.
				
				Kubernetes will be used to pull that image from docker hub and deploy it target environment.
					Update --> 
					
			
			Kubernetes Architecture ::::
			
			Kubernetes Components ::::
			
			Kubernetes Service ::::
			
			Kubernetes 
					
					
			Kubernetes Master :
			
				Kubernetes_Cluser1
					Kubernetes WorkerNode1
					Kubernetes WorkerNode2
					Kubernetes WorkerNode3
					
				Kubernetes_Cluser2
					Kubernetes WorkerNode1
					Kubernetes WorkerNode2
					Kubernetes WorkerNode3
										
			Installation and Configuration of Kubernetes :
			
				Open-Source Kubernetes 
				
					kubeadm ==>> 
					
				Managed Services :::
				
					AWS 		EKS 
					Azure 		AKS 
					GCP 		GKS 
			
			
			
			
			
					
			
			
