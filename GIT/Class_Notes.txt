DCP - 29th May 2023

###############
Day 1
29th May 2023
###############

		Introduction to DevOps!
		What is DevOps >>>> ???
		
		SDLC - Software Development Lifecycle		
			
			Software Application ::::
			
			Software :::
				Application Software 
									
					Desktop Applications 
					Web Applications
					Mobile Applications
					
					
				System Software 
				
				Desktop Applications 
				Web Applications
				Mobile Applications
				
			Requirement Analysis
			Design Docs
			Coding 
			Testing
			Implementation/Deployment
			Monitoring/Maintain
				
		Waterfall	---> Linear Fashion. == We can't accomodate the changing business needs frequently

			Requirement Analysis
			Design Docs
			Coding 
			Testing
			Implementation/Deployment
			Monitoring/Maintain

			Requirement Analysis
			Design Docs
			Coding 
			Testing
			Implementation/Deployment
			Monitoring/Maintain

			
		Agile Methodologies	--> The Application is splitted into various Modules/Iterations.
		
		Iteration 1:		Developer1 
			Requirement Analysis
			Design Docs
			Coding 
			Testing
			Implementation/Deployment
			Monitoring/Maintain	
		
		Iteration 2:
			Requirement Analysis
			Design Docs
			Coding 
			Testing
			Implementation/Deployment
			Monitoring/Maintain	

		Iteration 3:					test -- qa & UAT ====> Prod. 
			Requirement Analysis
			Design Docs
			Coding 
			Testing
			Implementation/Deployment
			Monitoring/Maintain	
			
		Contiuously develop the code / Integrate the code for testing / Delivery the application to prod.
		
		DevOps ---> Is a Software Development Strategy.
		
		
		
		
		
		
		
		
Retail Domain --> E_Commerce 
Tele-Comm Domain...	

	SP1 --> Release a new offer. --> 
	SP2 --> 		
		
		DevOps ---> Is a Software Development Strategy.
		
		
	Teams Involved ::: in SDLC Process !
	
		Development
		Testing
		Operations/Infra.
		Design 
		Business Analyst
		PMO
		Release Mgmt. Team 
		Solution Archi.
		Monitoring Team
		
		
		Infra-Structure Team  		Provision Infra-Structure / Environments
										shell scripts / Manually ==> Terraform / Ansible 
		Development Team			Coding & Development 
										IDE, GIT, Build and code integration
		Testing Team 				Test applications developed by Dev Team
		Release Management Team		Ensure timely release of product.
		Monitoring Team 			Prod. Monitoring		
		Security Team				Ensure the product is developed and deployed as per security policies
		
		
		DevOps Team ????
		
			Development 		Monitoring. 
			
		Stages of DevOps :::
		
			Continuous Development	
						***Coding as per Design
							IDEs,GIT,Jenkins,Build Tools like Maven 
						
							Code Build --> Compile and Create Artifacts(Binaries- *.war/*.jar)
							Promote these artifacts to Test Environment 
							Manually Notify Testing Teams Thru Emails 
						
			Continuous Integration
							Promote these artifacts to Test Environment 
								Jenkins, application Servers
			
			Continuous Testing 
							Automated Testing Tools - Junit,TestNG,Selenium --> Jenkins
							
			Continuous Delivery / Deployment	==> Process of releasing the products to Production envi. -> Ansible - Jenkins - docker & kubernetes
				
				Continuous Delivery	
						This requires Manual Approval for Prod. Release 
			
				Continuous Deployment
						This does not require any Manual Approval for Prod. Release
						
			Continuous Monitoring
						This is to monitor the Infra & application. --> Prometheus, Grafana, Dynatrace...

		Application Architecture :::
		
			Monolith Architecture 
				- Are tightly coupled 
				Here the product is deployed as a full application.
			
			Micro Service Based Architecture	
				Loosely Coupled == > 
				The application id deployed as a service.
				
				
www.amazon.com :::

	User_Registration-SignUp	--> Developer1 --> coding --> Testing --> Should able to Deploy to Prod. without impacting others
	SignIn
	Search_Products
	Add to Cart
	Place Order
	Payment
	Confirm
	Track




Eg.: 			
Continuous Delivery :
	banking services ---> ---> Non-Business Hrs.
		
Eg.: 			
Continuous Deployment :			Without any application downtime.  - Matured level of DevOps.
		amazon.com
		Netflix	
		facebook	
		
		


###############
Day 2
30th May 2023
###############
		
		DevOps ::::
		Lab Access 
		Class notes
		
		Environments ::
		
		Non-Prod Environment										Production Environment
		
		Dev Envi.	(src.code)			--> create src code -- unit test
		Build Envi.	(*.war/Docker Image)
		Test Envi.
			QA 	- Quality Assurance Testing
			UAT - User Acceptance Testing	=======>					Prod. Envi.		
			Pre-Prod/Staging 				=======>					Prod. Envi.
		
		
		
		
		Developers Workload :::		
		
			New Project 
			
			Enhancement project
			Bugfixing 
			
			
		DevOps :::
		
			People 		
						
				Infra-Structure Team  		Provision Infra-Structure / Environments
												shell scripts / Manually ==> Terraform / Ansible 
												Provisioning/Creating the Server ==> Terraform 
												Configuration Management Tools	 ==> Ansible
												
				Development Team			Coding & Development 
												IDE, GIT, Build and code integration
				Testing Team 				Test applications developed by Dev Team
				Release Management Team		Ensure timely release of product.
				Monitoring Team 			Prod. Monitoring		
				Security Team				Ensure the product is developed and deployed as per security policies
		
			Process :::
			
				Define the Process / Strategies		
			
			
			Tools :::
			
				DevOps Tools like Terraform / Ansible 
				
				
	Onboarding Application to DevOps ::::
	
		1. Assessment ==> 
			Generate Assessment Report 
			Tools 
			
		2. Project ==>  
		
		
	DevOps Tools :::
	
	
		Open-Source DevOps Tools 
		
			Jenkins,git,docker,kubernetes,terraform,ansible,......
		
		Managed Services
		
			From Cloud service providers ==> 
			
			
		DevOps Lifecycle :::
		
			Plan ===> ALM Tool  -- Application LifeCycle Management Tool
									Jira / Az Boards 
									
									
		Scripting Language :
		
			shell Scripting , groovy(jenkins), yaml(docker,ansible,kubernetes,gitlab-ci,az-pipelines), python
			
			
		GIT 		--> Source Code Management
		Docker		--> Containerization
		Kubernetes	--> Container Orchestration Tool
		Ansible		--> Configuration Management
		Terraform	--> IAC tools --> Server/Infra Provisioning 
		Prometheus/Grafana	--> Monitoring 
		
		Jenkins		--> Build Orchestration Tool 
		
		
	
	LAB Access ::::
		
		1. Cloud Platform 
		
			AWS --> cloud to create the Virtual Machines 
			- Create AWS Free Tier Account - 12 months.
			- Launch AWS Resources VMs to work on DevOps Tools.
			
	Class notes ::::
	
		1. Create Github Account :: https://github.com/
		
		2. AWS Free tier account :: 
				valid email_id
				phone number
				valid Credit/Debit Card ==> Should be enabled with International Transaction.
		
		
		

###############
Day 3
31st May 2023
###############	
	
		Version Control System Using GIT :::
		
			Continuous Development / Integration ==> Developers 
				IDEs == Create the src
				Build Tools to build the src code
				Create Artifacts 
				Promoted to higher environments
				Jenkins 
				VCS.
				
			Version Controlling Src Code ???
			
				signin.java -->		
				---
				-
				-
				-
				-
				-
				-
				
			Version Control System :
				Is used to version control the src code .
				It help the track the changes 
					It assigns a unique version_ID / Tag / Commit_Id 
					
					
			signin.java			==> signin.java_v1.0
			
			func1()
			{
			}
			func2()
			{
			}
			func3()
			{
			}					==> signin.java_v1.1
			
			GIT --> Opensource Distributed Version Control System.
					Is used to version control the src code .
					It help the track the changes.
					Used to perform parallel Development
					
					
			signin.java
			
			func1()			save -> signin.java_v1.0
			func2()			save -> signin.java_v1.1
			
			
			Repository ==> Collection of files and folders 
			
			Remote Repository --> Github --
			
			GIT CLI 
			
			GIT, github, gitlab, bitbucket, azrepo.
			
			Distributed Version Control System - GIT :::
			
			
			GIT File Workflow :::
			
			Local Machine																						Remote Server
			
			Working Directory	--------->	Staging Area	------------->	Local Repository	-------------->	Remote Repository
								 git add					  git commit						  git push
			d:/dir1/s1.java	 
			
			
			signin.java
			
			func1()
				{
				asdfas
				dfasdfas
				dfs;
				d
				}
				

		Developers' Workload :::		
		
			New Project 
			
			Enhancement project
			Bugfixing 
			
			
		GIT Misc Commands::
		
		fork				==> Copy/Clone a remote repo. to another remote repository.		
		git clone			==> Copy/Clone the remote repo. to local.
		git add				==> add the changes for working dir. to Staging Area.
		git commit			==> commit the changes from staging area to local repository.
		
		git push 			==> Push the changes from local repo. to remote repo.
		
		git fetch/pull		==> both fetch and pull commands are used to handle incremental changes.
			fetch			==> It is just used to check for incremental changes in remote repo.
								If there are any incremental changes in remote repo. The changes will be updated only Local Repository.
								
								To update the working dir. we use merge/pull/checkout
								
			pull			==> It is used to check for incremental changes in remote repo.
								If there are any incremental changes in remote repo. The changes will be updated in working dir. as well in Local Repository.
								
								git pull ==> git fetch + git merge 
								

	
		Demo ::::
		
		1. Installation of GIT CLI in local Machine (windows/linux/mac)
			In windows Machine ::: ==> 
					git bash***
					git gui
					git cli
			Create AWS Account 
					- Launch AWS Instances -- Linux
							Connect to VM :
									EC2 Instance Connect 
									SSH Clients :
											Putty
											Mobaxterm
									Terminal
					- Install git 
					
					Linux MAchines :: Package Managers ==> are used to install/update/remote the packages
								Ubuntu -- apt-get 
								fedora -- yum (prev. version)
										  dnf (latest version)
					
					

			

	
		2. Remote Repo. --> github.
		
		
		
		Working with Local GIT Repositories ::::
		
		yum install git
		
		mkdir DCP29
		
		cd DCP29
		
		mkdir Projectrepo1
		
		cd Projectrepo1
		
		DCP29/Projectrepo1
		
		
		git init 	==> Is used to initialize a local repo. - Create a default branch - master
															- Create .git folder/dir -- to manage the git repository.
															
		git config ::
		
		Global Config		==> It is applicable to all the repos. 
			git config --global user.name "Loksai"
			git config --global user.email "Loksai@xyz.com"
		
		Local Config.		==> It is applicable to a specific repo.		
			git config user.name "Loksai"
			git config user.email "Loksai@xyz.com"
			
			
		git status ==> used to get the current status of git repo.
		
		

		create a file1.txt
		git add file1.txt
		git commit -m "created file1.txt"
		git status

   28  git config --global user.name "Loksai"
   29  git config --global user.email "Loksai@xyz.com"
   30  clear
   31  git status
   32  ls
   33  echo "rec1" >> file1.txt
   34  cat file1.txt 
   35  git status
   36  git add file1.txt 
   37  git status
   38  git commit -m "Initial Commit"
   39  git status
   40  git log 
   41  echo "rec1" >> file2.txt
   42  git add file2.txt 
   43  git commit -m "CM1.1"
   44  git log
   45  history
   
  
###############
Day 4
1st June 2023
###############	

	git init
	
	git add file1.txt
	git add file3.txt file4.txt
	git add *.java
	git add .

Remove files from Staging Area :

	git rm --cached <file_name> ==> this jus remove the files from staging are. but file will be present in working dir.
	git rm -f <file_name>		==> this will remove from staging as well as working dir.


	git status 

	git log 
	git log --oneline
	git log --stat
	git log -2 
	git log -2 --oneline
	git log -2 --stat


git ignore ::::

	Java_project -- folder			
		signin.java
		signin.class
		properties
		config
		varibles
		target
		   signin.war


	.gitignore --> Used to Ignore the file --->

	*.class
	*.war
	target/
	properties

File creation in Linux ::

echo "re1" >> file1.txt		create a file with rec.

touch file2.txt			creates empty file

vi file3.txt			using vi editor.
	
*.txt ==> 



Local repo.						remote repo

Java_project Folder		Pushed 			remote repo.

src/
	index.jsp
	fun1.java

test/	
	fun1_test.java

dbpassword
secrets


.gitignore

dbpassword
secrets

.gitignore:::: in remote repos.



git diff command ::::::

file1.txt ==> lr

git diff 	==> track t changes between untracked file and the committed file.

git diff --cached ==> track t changes that have staged but not committed.
git diff --name-only --cached

git diff branch1 branch2 -- between branches

git diff commit_id1 commit_id2 -- between commits

git commit :::

	commit Message :::

 
###############
Day 5
2nd Jun. 2023
###############	

	git local repo creation,commit, diff,gitignore,git rm 
	
	Next :::
	git reset,revert
	git branching
	
	
	git add , git commit , commit_id, HEAD
	
	git reset ==> is used to undo the changes --> HEAD position will be moved from the latest to any specific commit point.
	
	git reset --soft	
			cm1,....,10
			
			It will move the HEAD position to previous/any specific commit point.
			The Changes will be removed from local repo. But, it will be available in Staging area and Working Dir.					
	
	git reset --mixed	--> default

			It will move the HEAD position to previous/any specific commit point.
			The Changes will be removed from local repo. and staging area. but the changes will be present in working dir.	
			
	git reset --hard

			It will move the HEAD position to previous/any specific commit point.
			The Changes will be removed from local repo., staging area as well as from working dir.	
			
	git reset <option> <commit_id>
	

	
	git revert ==> It is used to undo the changes without impacting the commit history. This can be used in the shared repo.
					Safest way to undo the changes 
					Create a New Commit point based on revert action.
					
	git revert <commit_id>	
	
	git revert and reset (hard) ===> 
	
	
	prod_app_v1.1
	prod_app_v1.2
	
	prod_app_v1.3		==> jus added to prod
	prod_app_v1.3.1		==> jus added to prod
	prod_app_v1.3.2		==> jus added to prod	
	
	
	4 - 6 hrs ==> 
		1st try to fix
		or else do safe revert action
	



GIT Branching Techniques ::::

	
		-	To perform parallel Development
		-	This help to independently work on the changes without impacting others.
		-	The integrity of Master Branch can be maintained at any point of time
		
	
	Proj. rel. ==> 
	
	java_proj.
	
		src/
			payment.java ===> 
			

	default present in master branch 
	
	GIT Branching Strategies ::::
	
	-> single user envi.
	
		repo1(master) 
			payment.java ===> (create 5 func.)
			
			feature_branch1 ==> create func1.	--> merging these changes to master 
			feature_branch2 ==> create func2.	--> merging these changes to master 				
			feature_branch3 ==> create func3.	--> merging these changes to master 			
			feature_branch4 ==> create func4.			
			feature_branch5 ==> create func5.	


	
		repo1(master) cm1,2,3,4,5
		
			Dev_Branch :
			
				feature_branch1 ==> create func1.
				feature_branch2 ==> create func2.				
				feature_branch3 ==> create func3.		
				feature_branch4 ==> create func4.			
				feature_branch5 ==> create func5.	




	-> Multi user envi.
	

		repo1(master) cm1,2,3,4,5	
		
			Release_Branch :::
			
				Intergration_Branch1		- Team1 
			
					Dev_Branch1 :	- Developer1
					
						feature_branch1 ==> create func1.
						feature_branch2 ==> create func2.				
						feature_branch3 ==> create func3.		
						feature_branch4 ==> create func4.			
						feature_branch5 ==> create func5.	


					Dev_Branch2 :	- Developer2
					
						feature_branch1 ==> create func1.
						feature_branch2 ==> create func2.				
						feature_branch3 ==> create func3.		
						feature_branch4 ==> create func4.			
						feature_branch5 ==> create func5.	
						
					Dev_Branch3 :	- Developer3
					
						feature_branch1 ==> create func1.
						feature_branch2 ==> create func2.				
						feature_branch3 ==> create func3.		
						feature_branch4 ==> create func4.			
						feature_branch5 ==> create func5.	
						

				Intergration_Branch2		- Team2
			
					Dev_Branch1 :	- Developer1
					
						feature_branch1 ==> create func1.
						feature_branch2 ==> create func2.				
						feature_branch3 ==> create func3.		
						feature_branch4 ==> create func4.			
						feature_branch5 ==> create func5.	


					Dev_Branch2 :	- Developer2
					
						feature_branch1 ==> create func1.
						feature_branch2 ==> create func2.				
						feature_branch3 ==> create func3.		
						feature_branch4 ==> create func4.			
						feature_branch5 ==> create func5.	
						
					Dev_Branch3 :	- Developer3
					
						feature_branch1 ==> create func1.
						feature_branch2 ==> create func2.				
						feature_branch3 ==> create func3.		
						feature_branch4 ==> create func4.			
						feature_branch5 ==> create func5.	
						

			master
				adhoc/hotfix/bugfix branch
				
	
		Working with GIT Branches ::
		
			Create Branch
			merge 
			
			
		Repo1 :
		
			master 
				feature1
				feature2
				feature3
		
		Create Branch
		
			git switch -c feature1 
			git branch feature3
			git checkout -b feature4
			
			to merge ::
				
				git switch master(target branch)		
				git merge feature1 
				
    1  f:
    2  cd f:
    3  clear
    4  git dir
    5  git version
    6  clear
    7  mkdir DCP-29
    8  cd DCP-29/
    9  clear
   10  ls
   11  mkdir proj1
   12  ls
   13  cd proj1/
   14  git init
   15  clear
   16  cd ..
   17  clear
   18  ls
   19  mkdir testrepo1
   20  cd testrepo1/
   21  clear
   22  git init
   23  ls
   24  echo "rec1" >> file1.txt
   25  git add .
   26  git commit -m "CM1"
   27  git config --global user.email "loksaieta@xyz.com"
   28  git config --global user.name "Loksai"
   29  git commit -m "CM1"
   30  git log --oneline
   31  ls
   32  echo "rec1" >> file2.txt
   33  git add .
   34  git commit -m "CM2"
   35  echo "rec1" >> file3.txt
   36  git add .
   37  git commit -m "CM3"
   38  echo "rec1" >> file4.txt
   39  git add .
   40  git commit -m "CM4"
   41  echo "rec1" >> file5.txt
   42  git add .
   43  git commit -m "CM5"
   44  clear
   45  ls
   46  git log --oneline
   47  git status
   48  git ls-files
   49  ls
   50  git ls-files
   51  git log --oneline
   52  git reset --soft 0b1678f
   53  git status
   54  git ls-files
   55  ls
   56  git log --oneline
   57  git commit -m "CM1.5"
   58  git log --oneline
   59  ls
   60  git ls-files
   61  git status
   62  git reset --mixed 0b1678f
   63  git ls-files
   64  ls
   65  git log --oneline
   66  git status
   67  git add .
   68  git commit -m "CM1.5"
   69  git log --oneline
   70  git ls-files
   71  ls
   72  git status
   73  git reset --hard 0b1678f
   74  git log --oneline
   75  git status
   76  git ls-files
   77  ls
   78  git log --oneline
   79  clear
   80  git log --oneline
   81  ls
   82  git ls-files
   83  git reset --hard 4a7c415
   84  ls
   85  git log --oneline
   86  echo "rec1" >> file3.txt
   87  git add .
   88  git commit -m "CM3"
   89  echo "rec1" >> file4.txt
   90  git add .
   91  git commit -m "CM4"
   92  echo "rec1" >> file5.txt
   93  git add .
   94  git commit -m "CM5"
   95  clear
   96  git log --oneline
   97  git status
   98  git revert ac9339d
   99  git log --oneline
  100  git status
  101  git ls-files
  102  cat file5.txt
  103  ls
  104  git show b36c463
  105  git log --oneline
  106  git revert b36c463
  107  git log --oneline
  108  git ls-files
  109  ls
  110  git show 4a7c415
  111  git revert 4a7c415
  112  git log --onelin
  113  git log --oneline
  114  ls
  115  git ls-files
  116  git revert c4523ea
  117  ls
  118  clear
  119  ls
  120  git log --oneline
  121  cd ..
  122  ls
  123  mkdir testrepo2
  124  cd testrepo2
  125  clear
  126  git init
  127  git status
  128  ls
  129  cclear
  130  clear
  131  echo "rec1" >> s1.txt
  132  git add .
  133  git commit -m "CM1 from master"
  134  echo "rec1" >> s2.txt
  135  git add .
  136  git commit -m "CM2 from master"
  137  echo "rec1" >> s3.txt
  138  git add .
  139  git commit -m "CM3 from master"
  140  clear
  141  git log --oneline
  142  git branch
  143  git switch -c feature1
  144  git branch
  145  git log --oneline
  146  ls
  147  git switch master
  148  git log --oneline
  149  git switch feature2
  150  git switch -c feature2
  151  git switch master
  152  git branch
  153  git branch feature3
  154  git branch
  155  git branch feature3
  156  git checkout -b feature4
  157  git branch
  158  git checkout -b feature4
  159  git switch master
  160  git branch
  161  git log --oneline
  162  git switch feature1
  163  git log --oneline
  164  ls
  165  ehco "rec1" >> f1.txt
  166  echo "rec1" >> f1.txt
  167  git add .
  168  git commit -m "CM1 from feature1"
  169  git log --oneline
  170  ls
  171  git switch master
  172  ls
  173  git log --oneline
  174  git merge feature1
  175  git log --oneline
  176  ls
  177  cat f1.txt
  178  git switch feature1
  179  git log --oneline
  180  history

###############
Day 6
5th June 2023
###############	

Branching Techniques :::

	git branch feature1
	git switch -c feature1
	git checkout -b feature1
	
	master 
		feature1
		feature2
		feature3
	
	
	master 
		dev
			feature1
			feature2
			feature3
	
	master 
	
		integration
			dev1
				feature1
				feature2
				feature3
			dev2
				feature1
				feature2
				feature3

	master 

		Release
			integration
				dev1
					feature1
					feature2
					feature3
				dev2
					feature1
					feature2
					feature3

			integration
				dev1
					feature1
					feature2
					feature3
				dev2
					feature1
					feature2
					feature3



	git branch feature1
	git switch -c feature1
	git checkout -b feature1


	GIT MERGE :::
	
		master 
			feature1	==> current
			
			git switch master		//Switch to target branch before merge.
			git merge feature1		// Shd be excuted from target Branch.
			
			
			
		master :: f1,2,3
		
		feature1 -=> f1,2,3,4
		feature2 -=> 
			
			
		To Fix Merge Conflict :::		
		
		1. First identify the file causing merge conflict
		2. Review the file content
		3. Decide which changes has to be present.
		4. Update the file and add the changes 
		5. Commit changes in target branch.
		
		DevOps :::: 
			We should always prevent the merge conflict. 
			
		Avoid Merge Conflict :::
			-	Review the changes before merge.
			-	Maintain proper branching strategy to ensure integrity of master.
			
			-	GIT provides some func. process to prevent merge conflict in master.
			
		git Rebase :::	==> Local branches 
		
		
		git Rebase :::
		
			It is used to create/rebase the current branch.
			It always helps to keep the current branch in-sync with target branch.
			It is used to avoid conflict in master/target Branch.
			Execute rebase command from current branch.
			ALWAYS do rebase before merge.
			

			master :: file1.txt 	rec1 
									rec2
									
				feature1	==> file1.txt == rec1,rec2  
				feature2 	==> file1.txt == rec1,rec2 of feature2
				
			master :::
						cm1,cm2,cm3
						
						cm1,cm2,cm3,cm1_from_feature1
						
						cm1,cm2,cm3,cm1_from_feature1,cm1_from_feature2 == this is wat expected. 
						
				
				feature1	==>	cm1,cm2,cm3
								cm1,cm2,cm3,cm1_from_feature1
					git switch master 
					git merge feature1					
				
				
				feature2	==>	cm1,cm2,cm3
								cm1,cm2,cm3,cm1_from_feature2
								
					git rebase master 				==> should be executed from current branch.
								cm1,cm2,cm3,cm1_from_feature1,cm1_from_feature2
					git switch master 
					git merge feature2	

				
			rebase (vs) pull 

			Rebase :
					Rebase in used within the repository, between the branches .
			Pull :		
					Used to keep the local repo. in sync with remote repo.
					
					
		GIT SQUASH ::::

			It is used to combine more than one commits into a single commit.
			
			master :::
						cm1,cm2,cm3
						
						cm1,cm2,cm3,f1-cm1,2,3,4,5,6,7,8,.....,100
						
						cm1,cm2,cm3,f1-cm1,2,3,4,5,6,7,8,.....,100,f2-cm1,2,3,4,5,6,7,8,.....,500
						
				feature1: 
						cm1,cm2,cm3,f1-cm1,2,3,4,5,6,7,8,.....,100
						
						git rebase master 
						git switch master
						git merge --squash feature1  			// While Merging
						
						cm1,cm2,cm3,f1-final_commit
						
						
						
				feature2: 
						cm1,cm2,cm3,f2-cm1,2,3,4,5,6,7,8,.....,500

						git rebase master 
						git switch master
						git merge feature2 
						
					Java program ==> func1,func2,func3,func4,func5
					
						cm1,cm2,cm3,f2-cm1,2,3,4,5,6,7,8,.....,500
						
						git rebase -i HEAD~500
							cm1,cm2,cm3,f2-CM-func1,
						
						
						
			git squash :: 
						This can be implemented at two levels ::
						
				1. While working in the current branch (Before Merge)
						git rebase -i HEAD~5
			
				2. While Merging 
				
					git merge --squash feature1 
						git commit -m "Combined commits frm feature1"
			
	master	cm1,REL1.0

		Release		cm1,team1-cm,team2-cm
			integration1 cm1,dev1-cm,dev2-cm																	Team1
				dev1cm1,(f1cm1,2,3,4,5,6,7,8,9,10),(f2cm1,2,3,4,5,6,7,8,9,10),(f3cm1,2,3,4,5,6,7,8,9,10)
					feature1 - (f1cm1,2,3,4,5,6,7,8,9,10)
					feature2 - (f2cm1,2,3,4,5,6,7,8,9,10)
					feature3 - (f3cm1,2,3,4,5,6,7,8,9,10)
				dev2	cm1,(f1cm1,2,3,4,5,6,7,8,9,10),(f2cm1,2,3,4,5,6,7,8,9,10),(f3cm1,2,3,4,5,6,7,8,9,10) 
					feature1
					feature2
					feature3

			integration2 cm1,dev1-cm,dev2-cm																	Team2
				dev1	cm1,(f1cm1,2,3,4,5,6,7,8,9,10),(f2cm1,2,3,4,5,6,7,8,9,10),(f3cm1,2,3,4,5,6,7,8,9,10)
					feature1
					feature2
					feature3
				dev2	cm1,(f1cm1,2,3,4,5,6,7,8,9,10),(f2cm1,2,3,4,5,6,7,8,9,10),(f3cm1,2,3,4,5,6,7,8,9,10)
					feature1
					feature2
					feature3
			
			
		git cherry-pick <commit_id>
		git cherry-pick team1-cm	

  192  mkdir dcp29
  193  cd dcp29/
  194  clear
  195  mkdir repo1
  196  cd repo1/
  197  git init
  198  echo "rec1" >> file1.txt
  199  git add .
  200  git commit -m "CM1 from master"
  201  echo "rec1" >> file2.txt
  202  git add .
  203  git commit -m "CM1 from master"
  204  echo "rec1" >> file3.txt
  205  git add .
  206  git commit -m "CM3 from master"
  207  clear
  208  git log
  209  clear
  210  clear
  211  git branch
  212  ls
  213  git switch -c feature1
  214  ls
  215  git log --oneline
  216  echo "rec1" >> file4.txt
  217  git add .
  218  git commit -m "CM1 from feature1"
  219  git switch master
  220  git merge feature1
  221  git log --oneline
  222  ls
  223  git switch -c feature2
  224  echo "rec2 from feature2" >> file1.txt
  225  cat file1.txt
  226  git switch master
  227  git switch feature2
  228  git add .
  229  git commit -m "CM1 from feature2"
  230  git switch master
  231  git log --oneline
  232  git merge feature2
  233  ls
  234  cat file1.txt
  235  git log --oneline
  236  git switch feature1
  237  cat file1.txt
  238  git log --oneline
  239  echo "rec2 from feature1" >> file1.txt
  240  git add .
  241  git commit -m "CM2 from feature1"
  242  cat file1.txt
  243  git switch master
  244  cat file1.txt
  245  git merge feature1
  246  cat file1.txt
  247  vi file1.txt
  248  git status
  249  git add .
  250  git status
  251  git commit -m "fixed Merge Conflict"
  252  git status
  253  cat file1.txt
  254  clear
  255  ls
  256  cd ..
  257  mkdir repo2
  258  cd repo2
  259  git init
  260  clear
  261  echo "rec1" >> f1.txt
  262  git add .
  263  git commit -m "CM1 from master"
  264  echo "rec1" >> f2.txt
  265  git add .
  266  git commit -m "CM2 from master"
  267  echo "rec1" >> f3.txt
  268  git add .
  269  git commit -m "CM3 from master"
  270  clear
  271  clear
  272  git log --oneline
  273  git branch feature1
  274  git branch feature2
  275  git branch
  276  git switch feature1
  277  clear
  278  git log --oneline
  279  ls
  280  echo "rec1" >> s1.txt
  281  git add .
  282  git commit -m "cm1 from feature1"
  283  git log --oneline
  284  git switch master
  285  git merge feature1
  286  ls
  287  git log --oneline
  288  git switch feature2
  289  ls
  290  git log --oneline
  291  echo "rec1" >> a1.txt
  292  git add .
  293  git commit -m "CM1 from feature2"
  294  git log --oneline
  295  ls
  296  git rebase master
  297  git log --oneline
  298  ls
  299  git switch master
  300  git merge feature2
  301  git log --oneline
  302  clear
  303  ls
  304  git branch
  305  git status
  306  git switch feature1
  307  clear
  308  ls
  309  git log --oneline
  310  echo "rec1" >> q1.txt
  311  git add .
  312  git commit -m "f1cm1"
  313  echo "rec1" >> q2.txt
  314  git add .
  315  git commit -m "f1cm2"
  316  echo "rec1" >> q3.txt
  317  git add .
  318  git commit -m "f1cm3"
  319  echo "rec1" >> q4.txt
  320  git add .
  321  git commit -m "f1cm4"
  322  echo "rec1" >> q5.txt
  323  git add .
  324  git commit -m "f1cm5"
  325  git log --oneline
  326  ls
  327  git switch master
  328  git merge --squash feature1
  329  ls
  330  git status
  331  git commit -m "Combined commits from feature1"
  332  git status
  333  git log --oneline
  334  ls
  335  git switch feature1
  336  git status
  337  cler
  338  clear
  339  git log --oneline
  340  echo "rec1" >> w1.txt
  341  git add .
  342  git commit -m "f1cm1.1"
  343  echo "rec1" >> w2.txt
  344  git add .
  345  git commit -m "f1cm1.2"
  346  echo "rec1" >> w3.txt
  347  git add .
  348  clear
  349  git status
  350  git commit -m "f1cm1.3"
  351  git log --oneline
  352  ls
  353  echo "rec1" >> f4.txt
  354  git add .
  355  git commit -m "f1cm1.4"
  356  git log --oneline
  357  git rebase -i HEAD~4
  358  git log --oneline
  359  ls
  360  history		
		
Next:
	Handling Remote Repository::::
	
###############
Day 6
6th June 2023
###############				
			
			
		Handling GIT Remote Repositories ::::
		
		
			
		Local Repo..
		
		
		
		Envi. 
		
			Dev
			Testing 
				QA 
				UAT
			
			
		Remote Repo. 

			github remote repo.
			gitlab
			az repo 
			aws codecommit
			bitbucket
		
		
		Developers' Workload :
		
		case1:
			New Project 
		case2:	
			Enhancement Project
			Bugfixing 
			
		
		Case2 ::
			Remote repo is already present .
			
			git clone 
			
			git push 
			
			git pull
			
			git push 
			
			git fetch 
			
			git remote 
			
			
			
		git clone :::
		
			git clone https://github.com/LoksaiETA/dcp-29-testrepo1.git
			
				username : loksaieta
				Access Token:
			
		Handle remote repo in local ::::
			
		git clone 
		
		git add .
		
		git commit -m "Local Changes"
		
		git push -u origin main 
		
		git remote -v 
			
			
		case1:
			New Project 			
			
		Create Local Repo. 
		
			add 
			commit 
		
		git remote add origin <clone_url>
		
		git remote remove add origin <clone_url>
		
		push it to remote repo.
		
		
		git fetch ==> Is used to get the incremental changes from remote repo to local repo.
		
		git pull origin master  ==> Is used to pull the incremental changes from remote to local repo. as well as working dir.
			


		GIT Misc Commands::
		
		fork				==> Copy/Clone a remote repo. to another remote repository.		
		git clone			==> Copy/Clone the remote repo. to local.
		git add				==> add the changes for working dir. to Staging Area.
		git commit			==> commit the changes from staging area to local repository.
		
		git push 			==> Push the changes from local repo. to remote repo.
		
		git fetch/pull		==> both fetch and pull commands are used to handle incremental changes.
			fetch			==> It is just used to check for incremental changes in remote repo.
								If there are any incremental changes in remote repo. The changes will be updated only Local Repository.
								
								To update the working dir. we use merge/pull/checkout
								
			pull			==> It is used to check for incremental changes in remote repo.
								If there are any incremental changes in remote repo. The changes will be updated in working dir. as well in Local Repository.
								
								git pull ==> git fetch + git merge 
	
	Summary :::
	
		git installation:
		Git branching Strategies:
		Git file workflow
		GIT Mics Commands 
		Git remote repo.
		
		git stash ::::
		
				-Is used to store the uncommitted changes to a temp. area.
		
		
		developer :::
		
			master 		cm1,cm2,c3
			
				feature1 -> cm1,cm2,c3,
				
					we cannot leave the branch with uncommitted changes. 

				hotfix 
			
		git stash 

		git stash list 
		
		git stash show <stash_id>
		
		git stash save "msg"
			
		git stash apply --> will get the changes back to staging area. But changes are not removed from stash list.	
		git stash apply stash@{2}
		
		git stash pop  --> will get the changes back to staging area. and changes are automatically removed from stash list.

		git stash drop ==> removes the latest entry from the stash list. 
		git stash drop stash@{2}		
			
		git stash clear --> removes all the entry from the stash list. 			
		
		git stash branch feature1bkup		==> craete new branch based on stashed entry.
			
		
		master ---> cm1,cm2,cm3 --> tag it with the release id
		
			jdk 1.7
			jdk 1.8	

	Continuous Integration ::: 
	
	Jenkins --> Build Orchestration Tool. 
	
	
	Developer ===> Create source code :::
	
	
	Development Activities :::::
	
		--> Create Application Source Code. 
				IDE,Tools 
	
	
			- create src code,
			- unit testing 
			- build - compile & create artifacts(binaries) -- Store the artifacts 
			- deploy the changes to test environment 
			- Notify the testing team 
	
		
	Build ORchestration Tool like Jenkins :::
	
			- Create the source code, and commit the code in src code repos. (github)
			Jenkins will automate all the below task:
				- unit testing 
				- build - compile & create artifacts(binaries) -- Store the artifacts 
				- deploy the changes to test environment 
				- Notify the testing team 
				- automated testing 
				- promote the code to higher envi.
				- even to prod .
				- monitoring 
				
	bamboo 
	az pipeline
	aws codepipeline 
	gitlab-ci 
	
		1. Understand what is Jenkins 
		2. Jenkins Architecture.
		3. Your roles & Responsibilities :::
		
		Users :::
		
			Developers ::: -- They are just consumers. 
			
			DevOps Team :::: Admin to Jenkins Server.
			
				1. Installation of Jenkins 
				2. Administration of Jenkins 
					- Plugins management 
					- Tools Management
					- User Management
					- Security Management
					- Credential Management 
					- Jenkins Slave/Node Management
					- Creation of CICD Pipeline and automation
					- Backup and recovery 
					- Strategies to maintain the Jenkins Server 
							Server Upgrade
							Backup 
							Recovery
							
			Jenkins uses Groovy script to create any Automation/Pipelines 
			Jenkins is a Master Slave Architecture :::
			
			Jenkins Master 	--> Used to create Jenkins Jobs/Project/Pipelines 
							-->	Schedule the Jobs to Slave Machines 
							
			Jenkins Slave 	--> Used to actually execute/run the Jenkins Jobs/Project
			
			Scripting ::: 	groovy,shell,yaml,python
				
			
			
	
